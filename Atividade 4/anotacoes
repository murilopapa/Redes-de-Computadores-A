PSEUDO-CÓDIGO ATIVIDADE 4

em teoria, é a mesma coisa que fizemos na ATIVIDADE 3, mas agora, usar threads

começo do codigo, segue igual, com as inicializações de servidor
em relação ao codigo da atividade 3, mudar as variaveis para como eram na atividade 2,
pq agora nao precisa mais criar memoria compartilhada

a espera de uma conexao, deve ficar dentro de um while(1), e logo que receber a conexao,
colocar a thread para a função |void *servidor()|

dentro dessa função, colocar as coisas que tinhamos no while(1) da atividade 3, que são as
funções de servidor, e essa função deve ficar em um while(1), e só se encerrar quando o cliente quiser

o servidor fica em um loop infinito, entao nao sei se precisa daquele vetor de threads que serve
para armazena-las, ja que, em teoria, seriam "infinitas", threads
ex:
if (pthread_create(&servidores[count_servers], NULL, servidor, (void *)count_servers + 1))
        {
            printf("ERRO: impossivel criar um thread consumidor\n");
            exit(-1);
        }

esse vetor servidores[count_servers], não sei se precisa muito dele 

tem que arrumar o apagar, pq o codigo base eu peguei da atividade 2, que é o mais limpo pra modificar

ainda falando sobre as variaveis, eu acho que deveriam ser globais, pq algumas sao usadas
na funcao main, e devem ser usadas na funcao servidor, ai ou passa tudo por parametro, ou
usa variavel global, se leu ate aqui, pega no meu pau

https://github.com/rogerluan/SO-A/blob/master/experimento4/exp4.c





--
o que falta (em teoira, rs)
- fechar a thread sem fechar o server
- colocar os semaforos
- pthread_t servidores[50]; <- ver pra que serve
